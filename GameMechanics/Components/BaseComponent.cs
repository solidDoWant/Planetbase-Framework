using Planetbase;
using UnityEngine;

namespace PlanetbaseFramework.GameMechanics.Components
{
    public class BaseComponent : ComponentType
    {
        public Texture2D Icon { get; protected set; }
        public GameObject Model { get; protected set; } // The model object is long lived, and all other object (i.e. mModel) are derived from a copy of it.

        public BaseComponent(Texture2D icon, GameObject model)
        {
            Icon = icon;
            Model = model;

            // These settings are designed to provide safe defaults that keep the game
            // from crashing, not to provide meaningful functionality.
            mConstructionCosts = new ResourceAmounts();
            mStatusRecoveryTimes = new float[(int)CharacterIndicator.Count];
            initStrings();
            mIcon = loadIcon();
        }

        public override Texture2D loadIcon() => Icon;
        public override Texture2D loadIcon(Color color) => Util.applyColor(Icon, color);

        /// <summary>
        /// Provides a model for the component type. The following assumptions are made about `Model`:
        /// * Collision geometries are added as needed
        /// * The top level object is set as inactive
        /// * The mesh of all child objects has been "smoothed", following
        ///     calculateSmoothMeshRecursive logic
        ///
        /// It is recommended that the objects provided here are generated by the
        /// ComponentModelBuilder class.
        /// </summary>
        public override GameObject loadPrefab()
        {
            // Upon transition from GameStateGame, the GroupName GameObject and all children will be destroyed.
            var moduleTypeRootObject = GameObject.Find(GroupName) ?? new GameObject { name = GroupName };
            var modelCopy = Object.Instantiate(Model);
            modelCopy.transform.SetParent(moduleTypeRootObject.transform, false);
            return modelCopy;
        }
    }
}