using Planetbase;
using UnityEngine;

namespace PlanetbaseFramework.GameMechanics.Buildings
{
    public class BaseModuleType : ModuleType
    {
        public Texture2D Icon { get; protected set; }
        public GameObject[] Models { get; protected set; }  // The model objects are long lived, and all other object (i.e. mModels) are derived from a copy of them.

        public BaseModuleType(Texture2D icon, GameObject[] models)
        {
            Models = models;
            Icon = icon;

            // These settings are designed to provide safe defaults that keep the game
            // from crashing, not to provide meaningful functionality.
            mIcon = loadIcon();
            mMinSize = 0;
            mDefaultSize = 0;
            mMaxSize = models.Length - 1;
            initStrings();
            mCost = new ResourceAmounts();  // Set this for a flat cost for all sizes
        }

        /// <summary>
        /// Provides a model for the module type. The following assumptions are made about `Models`:
        /// * Collision geometries are added as needed
        /// * All child GameObjects are appropriately tagged
        /// * The top level object is set as inactive
        /// * The mesh of all child objects has been "smoothed", following
        ///     calculateSmoothMeshRecursive logic
        ///
        /// It is recommended that the objects provided here are generated by the
        /// ModuleModelBuilder class.
        /// </summary>
        public override GameObject loadPrefab(int sizeIndex)
        {
            var modelForSize = Models[sizeIndex - mMinSize]; // Index takes into account the edge case where mMinSize != 0

            // Upon transition from GameStateGame, the GroupName GameObject and all children will be destroyed.
            var moduleTypeRootObject = GameObject.Find(GroupName) ?? new GameObject { name = GroupName };
            var modelCopy = Object.Instantiate(modelForSize);
            modelCopy.transform.SetParent(moduleTypeRootObject.transform, false);
            return modelCopy;
        }

        public override Texture2D loadIcon() => Icon;
    }
}